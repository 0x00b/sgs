// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appproto.proto

#ifndef PROTOBUF_appproto_2eproto_INCLUDED
#define PROTOBUF_appproto_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_appproto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsReqLoginImpl();
void InitDefaultsReqLogin();
void InitDefaultsReqLogoutImpl();
void InitDefaultsReqLogout();
void InitDefaultsAckLoginSuccessUcImpl();
void InitDefaultsAckLoginSuccessUc();
void InitDefaultsAckLoginSuccessBcImpl();
void InitDefaultsAckLoginSuccessBc();
void InitDefaultsAckLoginErrorImpl();
void InitDefaultsAckLoginError();
void InitDefaultsAckLogoutBcImpl();
void InitDefaultsAckLogoutBc();
void InitDefaultsAckUpTableSuccessImpl();
void InitDefaultsAckUpTableSuccess();
void InitDefaultsAckUpTableErrorUcImpl();
void InitDefaultsAckUpTableErrorUc();
void InitDefaultsAckAheadDownTableImpl();
void InitDefaultsAckAheadDownTable();
void InitDefaultsAckDownTableSuccessImpl();
void InitDefaultsAckDownTableSuccess();
void InitDefaultsAckPrereadyBCImpl();
void InitDefaultsAckPrereadyBC();
void InitDefaultsAckEmotionBCImpl();
void InitDefaultsAckEmotionBC();
inline void InitDefaults() {
  InitDefaultsReqLogin();
  InitDefaultsReqLogout();
  InitDefaultsAckLoginSuccessUc();
  InitDefaultsAckLoginSuccessBc();
  InitDefaultsAckLoginError();
  InitDefaultsAckLogoutBc();
  InitDefaultsAckUpTableSuccess();
  InitDefaultsAckUpTableErrorUc();
  InitDefaultsAckAheadDownTable();
  InitDefaultsAckDownTableSuccess();
  InitDefaultsAckPrereadyBC();
  InitDefaultsAckEmotionBC();
}
}  // namespace protobuf_appproto_2eproto
namespace proto {
namespace game {
class AckAheadDownTable;
class AckAheadDownTableDefaultTypeInternal;
extern AckAheadDownTableDefaultTypeInternal _AckAheadDownTable_default_instance_;
class AckDownTableSuccess;
class AckDownTableSuccessDefaultTypeInternal;
extern AckDownTableSuccessDefaultTypeInternal _AckDownTableSuccess_default_instance_;
class AckEmotionBC;
class AckEmotionBCDefaultTypeInternal;
extern AckEmotionBCDefaultTypeInternal _AckEmotionBC_default_instance_;
class AckLoginError;
class AckLoginErrorDefaultTypeInternal;
extern AckLoginErrorDefaultTypeInternal _AckLoginError_default_instance_;
class AckLoginSuccessBc;
class AckLoginSuccessBcDefaultTypeInternal;
extern AckLoginSuccessBcDefaultTypeInternal _AckLoginSuccessBc_default_instance_;
class AckLoginSuccessUc;
class AckLoginSuccessUcDefaultTypeInternal;
extern AckLoginSuccessUcDefaultTypeInternal _AckLoginSuccessUc_default_instance_;
class AckLogoutBc;
class AckLogoutBcDefaultTypeInternal;
extern AckLogoutBcDefaultTypeInternal _AckLogoutBc_default_instance_;
class AckPrereadyBC;
class AckPrereadyBCDefaultTypeInternal;
extern AckPrereadyBCDefaultTypeInternal _AckPrereadyBC_default_instance_;
class AckUpTableErrorUc;
class AckUpTableErrorUcDefaultTypeInternal;
extern AckUpTableErrorUcDefaultTypeInternal _AckUpTableErrorUc_default_instance_;
class AckUpTableSuccess;
class AckUpTableSuccessDefaultTypeInternal;
extern AckUpTableSuccessDefaultTypeInternal _AckUpTableSuccess_default_instance_;
class ReqLogin;
class ReqLoginDefaultTypeInternal;
extern ReqLoginDefaultTypeInternal _ReqLogin_default_instance_;
class ReqLogout;
class ReqLogoutDefaultTypeInternal;
extern ReqLogoutDefaultTypeInternal _ReqLogout_default_instance_;
}  // namespace game
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::game::AckAheadDownTable* Arena::Create< ::proto::game::AckAheadDownTable>(Arena*);
template<> ::proto::game::AckDownTableSuccess* Arena::Create< ::proto::game::AckDownTableSuccess>(Arena*);
template<> ::proto::game::AckEmotionBC* Arena::Create< ::proto::game::AckEmotionBC>(Arena*);
template<> ::proto::game::AckLoginError* Arena::Create< ::proto::game::AckLoginError>(Arena*);
template<> ::proto::game::AckLoginSuccessBc* Arena::Create< ::proto::game::AckLoginSuccessBc>(Arena*);
template<> ::proto::game::AckLoginSuccessUc* Arena::Create< ::proto::game::AckLoginSuccessUc>(Arena*);
template<> ::proto::game::AckLogoutBc* Arena::Create< ::proto::game::AckLogoutBc>(Arena*);
template<> ::proto::game::AckPrereadyBC* Arena::Create< ::proto::game::AckPrereadyBC>(Arena*);
template<> ::proto::game::AckUpTableErrorUc* Arena::Create< ::proto::game::AckUpTableErrorUc>(Arena*);
template<> ::proto::game::AckUpTableSuccess* Arena::Create< ::proto::game::AckUpTableSuccess>(Arena*);
template<> ::proto::game::ReqLogin* Arena::Create< ::proto::game::ReqLogin>(Arena*);
template<> ::proto::game::ReqLogout* Arena::Create< ::proto::game::ReqLogout>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace game {

// ===================================================================

class ReqLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.game.ReqLogin) */ {
 public:
  ReqLogin();
  virtual ~ReqLogin();

  ReqLogin(const ReqLogin& from);

  inline ReqLogin& operator=(const ReqLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqLogin(ReqLogin&& from) noexcept
    : ReqLogin() {
    *this = ::std::move(from);
  }

  inline ReqLogin& operator=(ReqLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqLogin* internal_default_instance() {
    return reinterpret_cast<const ReqLogin*>(
               &_ReqLogin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ReqLogin* other);
  friend void swap(ReqLogin& a, ReqLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqLogin* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqLogin>(NULL);
  }

  ReqLogin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqLogin& from);
  void MergeFrom(const ReqLogin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string skey = 2;
  void clear_skey();
  static const int kSkeyFieldNumber = 2;
  const ::std::string& skey() const;
  void set_skey(const ::std::string& value);
  #if LANG_CXX11
  void set_skey(::std::string&& value);
  #endif
  void set_skey(const char* value);
  void set_skey(const char* value, size_t size);
  ::std::string* mutable_skey();
  ::std::string* release_skey();
  void set_allocated_skey(::std::string* skey);

  // string roomid = 3;
  void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  const ::std::string& roomid() const;
  void set_roomid(const ::std::string& value);
  #if LANG_CXX11
  void set_roomid(::std::string&& value);
  #endif
  void set_roomid(const char* value);
  void set_roomid(const char* value, size_t size);
  ::std::string* mutable_roomid();
  ::std::string* release_roomid();
  void set_allocated_roomid(::std::string* roomid);

  // int32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // int32 req_count = 4;
  void clear_req_count();
  static const int kReqCountFieldNumber = 4;
  ::google::protobuf::int32 req_count() const;
  void set_req_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr skey_;
  ::google::protobuf::internal::ArenaStringPtr roomid_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 req_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_appproto_2eproto::TableStruct;
  friend void ::protobuf_appproto_2eproto::InitDefaultsReqLoginImpl();
};
// -------------------------------------------------------------------

class ReqLogout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.game.ReqLogout) */ {
 public:
  ReqLogout();
  virtual ~ReqLogout();

  ReqLogout(const ReqLogout& from);

  inline ReqLogout& operator=(const ReqLogout& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqLogout(ReqLogout&& from) noexcept
    : ReqLogout() {
    *this = ::std::move(from);
  }

  inline ReqLogout& operator=(ReqLogout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLogout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqLogout* internal_default_instance() {
    return reinterpret_cast<const ReqLogout*>(
               &_ReqLogout_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ReqLogout* other);
  friend void swap(ReqLogout& a, ReqLogout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqLogout* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqLogout>(NULL);
  }

  ReqLogout* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReqLogout>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqLogout& from);
  void MergeFrom(const ReqLogout& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqLogout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqLogout)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 uid_;
  mutable int _cached_size_;
  friend struct ::protobuf_appproto_2eproto::TableStruct;
  friend void ::protobuf_appproto_2eproto::InitDefaultsReqLogoutImpl();
};
// -------------------------------------------------------------------

class AckLoginSuccessUc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.game.AckLoginSuccessUc) */ {
 public:
  AckLoginSuccessUc();
  virtual ~AckLoginSuccessUc();

  AckLoginSuccessUc(const AckLoginSuccessUc& from);

  inline AckLoginSuccessUc& operator=(const AckLoginSuccessUc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckLoginSuccessUc(AckLoginSuccessUc&& from) noexcept
    : AckLoginSuccessUc() {
    *this = ::std::move(from);
  }

  inline AckLoginSuccessUc& operator=(AckLoginSuccessUc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckLoginSuccessUc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckLoginSuccessUc* internal_default_instance() {
    return reinterpret_cast<const AckLoginSuccessUc*>(
               &_AckLoginSuccessUc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(AckLoginSuccessUc* other);
  friend void swap(AckLoginSuccessUc& a, AckLoginSuccessUc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckLoginSuccessUc* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckLoginSuccessUc>(NULL);
  }

  AckLoginSuccessUc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckLoginSuccessUc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckLoginSuccessUc& from);
  void MergeFrom(const AckLoginSuccessUc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckLoginSuccessUc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string avatar = 2;
  void clear_avatar();
  static const int kAvatarFieldNumber = 2;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_avatar(::std::string&& value);
  #endif
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 seatid = 1;
  void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  ::google::protobuf::int32 seatid() const;
  void set_seatid(::google::protobuf::int32 value);

  // int32 exp = 3;
  void clear_exp();
  static const int kExpFieldNumber = 3;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // int32 money = 4;
  void clear_money();
  static const int kMoneyFieldNumber = 4;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // int32 ready = 6;
  void clear_ready();
  static const int kReadyFieldNumber = 6;
  ::google::protobuf::int32 ready() const;
  void set_ready(::google::protobuf::int32 value);

  // int32 rmb = 7;
  void clear_rmb();
  static const int kRmbFieldNumber = 7;
  ::google::protobuf::int32 rmb() const;
  void set_rmb(::google::protobuf::int32 value);

  // int32 see = 8;
  void clear_see();
  static const int kSeeFieldNumber = 8;
  ::google::protobuf::int32 see() const;
  void set_see(::google::protobuf::int32 value);

  // int32 sex = 9;
  void clear_sex();
  static const int kSexFieldNumber = 9;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // int32 uid = 10;
  void clear_uid();
  static const int kUidFieldNumber = 10;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckLoginSuccessUc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 ready_;
  ::google::protobuf::int32 rmb_;
  ::google::protobuf::int32 see_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 uid_;
  mutable int _cached_size_;
  friend struct ::protobuf_appproto_2eproto::TableStruct;
  friend void ::protobuf_appproto_2eproto::InitDefaultsAckLoginSuccessUcImpl();
};
// -------------------------------------------------------------------

class AckLoginSuccessBc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.game.AckLoginSuccessBc) */ {
 public:
  AckLoginSuccessBc();
  virtual ~AckLoginSuccessBc();

  AckLoginSuccessBc(const AckLoginSuccessBc& from);

  inline AckLoginSuccessBc& operator=(const AckLoginSuccessBc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckLoginSuccessBc(AckLoginSuccessBc&& from) noexcept
    : AckLoginSuccessBc() {
    *this = ::std::move(from);
  }

  inline AckLoginSuccessBc& operator=(AckLoginSuccessBc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckLoginSuccessBc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckLoginSuccessBc* internal_default_instance() {
    return reinterpret_cast<const AckLoginSuccessBc*>(
               &_AckLoginSuccessBc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AckLoginSuccessBc* other);
  friend void swap(AckLoginSuccessBc& a, AckLoginSuccessBc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckLoginSuccessBc* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckLoginSuccessBc>(NULL);
  }

  AckLoginSuccessBc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckLoginSuccessBc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckLoginSuccessBc& from);
  void MergeFrom(const AckLoginSuccessBc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckLoginSuccessBc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string avatar = 5;
  void clear_avatar();
  static const int kAvatarFieldNumber = 5;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_avatar(::std::string&& value);
  #endif
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // int32 seatid = 1;
  void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  ::google::protobuf::int32 seatid() const;
  void set_seatid(::google::protobuf::int32 value);

  // int32 uid = 2;
  void clear_uid();
  static const int kUidFieldNumber = 2;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // int32 money = 3;
  void clear_money();
  static const int kMoneyFieldNumber = 3;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // int32 sex = 6;
  void clear_sex();
  static const int kSexFieldNumber = 6;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckLoginSuccessBc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 sex_;
  mutable int _cached_size_;
  friend struct ::protobuf_appproto_2eproto::TableStruct;
  friend void ::protobuf_appproto_2eproto::InitDefaultsAckLoginSuccessBcImpl();
};
// -------------------------------------------------------------------

class AckLoginError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.game.AckLoginError) */ {
 public:
  AckLoginError();
  virtual ~AckLoginError();

  AckLoginError(const AckLoginError& from);

  inline AckLoginError& operator=(const AckLoginError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckLoginError(AckLoginError&& from) noexcept
    : AckLoginError() {
    *this = ::std::move(from);
  }

  inline AckLoginError& operator=(AckLoginError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckLoginError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckLoginError* internal_default_instance() {
    return reinterpret_cast<const AckLoginError*>(
               &_AckLoginError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(AckLoginError* other);
  friend void swap(AckLoginError& a, AckLoginError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckLoginError* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckLoginError>(NULL);
  }

  AckLoginError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckLoginError>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckLoginError& from);
  void MergeFrom(const AckLoginError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckLoginError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // int32 code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckLoginError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct ::protobuf_appproto_2eproto::TableStruct;
  friend void ::protobuf_appproto_2eproto::InitDefaultsAckLoginErrorImpl();
};
// -------------------------------------------------------------------

class AckLogoutBc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.game.AckLogoutBc) */ {
 public:
  AckLogoutBc();
  virtual ~AckLogoutBc();

  AckLogoutBc(const AckLogoutBc& from);

  inline AckLogoutBc& operator=(const AckLogoutBc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckLogoutBc(AckLogoutBc&& from) noexcept
    : AckLogoutBc() {
    *this = ::std::move(from);
  }

  inline AckLogoutBc& operator=(AckLogoutBc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckLogoutBc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckLogoutBc* internal_default_instance() {
    return reinterpret_cast<const AckLogoutBc*>(
               &_AckLogoutBc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(AckLogoutBc* other);
  friend void swap(AckLogoutBc& a, AckLogoutBc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckLogoutBc* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckLogoutBc>(NULL);
  }

  AckLogoutBc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckLogoutBc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckLogoutBc& from);
  void MergeFrom(const AckLogoutBc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckLogoutBc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 seatid = 1;
  void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  ::google::protobuf::int32 seatid() const;
  void set_seatid(::google::protobuf::int32 value);

  // int32 uid = 2;
  void clear_uid();
  static const int kUidFieldNumber = 2;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // int32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckLogoutBc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_appproto_2eproto::TableStruct;
  friend void ::protobuf_appproto_2eproto::InitDefaultsAckLogoutBcImpl();
};
// -------------------------------------------------------------------

class AckUpTableSuccess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.game.AckUpTableSuccess) */ {
 public:
  AckUpTableSuccess();
  virtual ~AckUpTableSuccess();

  AckUpTableSuccess(const AckUpTableSuccess& from);

  inline AckUpTableSuccess& operator=(const AckUpTableSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckUpTableSuccess(AckUpTableSuccess&& from) noexcept
    : AckUpTableSuccess() {
    *this = ::std::move(from);
  }

  inline AckUpTableSuccess& operator=(AckUpTableSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUpTableSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckUpTableSuccess* internal_default_instance() {
    return reinterpret_cast<const AckUpTableSuccess*>(
               &_AckUpTableSuccess_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(AckUpTableSuccess* other);
  friend void swap(AckUpTableSuccess& a, AckUpTableSuccess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckUpTableSuccess* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckUpTableSuccess>(NULL);
  }

  AckUpTableSuccess* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckUpTableSuccess>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckUpTableSuccess& from);
  void MergeFrom(const AckUpTableSuccess& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckUpTableSuccess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string avatar = 6;
  void clear_avatar();
  static const int kAvatarFieldNumber = 6;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_avatar(::std::string&& value);
  #endif
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // int32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // int32 seatid = 2;
  void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  ::google::protobuf::int32 seatid() const;
  void set_seatid(::google::protobuf::int32 value);

  // int32 ready = 3;
  void clear_ready();
  static const int kReadyFieldNumber = 3;
  ::google::protobuf::int32 ready() const;
  void set_ready(::google::protobuf::int32 value);

  // int32 sex = 5;
  void clear_sex();
  static const int kSexFieldNumber = 5;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // int32 money = 7;
  void clear_money();
  static const int kMoneyFieldNumber = 7;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // int32 exp = 8;
  void clear_exp();
  static const int kExpFieldNumber = 8;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckUpTableSuccess)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 ready_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 exp_;
  mutable int _cached_size_;
  friend struct ::protobuf_appproto_2eproto::TableStruct;
  friend void ::protobuf_appproto_2eproto::InitDefaultsAckUpTableSuccessImpl();
};
// -------------------------------------------------------------------

class AckUpTableErrorUc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.game.AckUpTableErrorUc) */ {
 public:
  AckUpTableErrorUc();
  virtual ~AckUpTableErrorUc();

  AckUpTableErrorUc(const AckUpTableErrorUc& from);

  inline AckUpTableErrorUc& operator=(const AckUpTableErrorUc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckUpTableErrorUc(AckUpTableErrorUc&& from) noexcept
    : AckUpTableErrorUc() {
    *this = ::std::move(from);
  }

  inline AckUpTableErrorUc& operator=(AckUpTableErrorUc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUpTableErrorUc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckUpTableErrorUc* internal_default_instance() {
    return reinterpret_cast<const AckUpTableErrorUc*>(
               &_AckUpTableErrorUc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(AckUpTableErrorUc* other);
  friend void swap(AckUpTableErrorUc& a, AckUpTableErrorUc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckUpTableErrorUc* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckUpTableErrorUc>(NULL);
  }

  AckUpTableErrorUc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckUpTableErrorUc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckUpTableErrorUc& from);
  void MergeFrom(const AckUpTableErrorUc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckUpTableErrorUc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // int32 money = 2;
  void clear_money();
  static const int kMoneyFieldNumber = 2;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // int32 code = 3;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckUpTableErrorUc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct ::protobuf_appproto_2eproto::TableStruct;
  friend void ::protobuf_appproto_2eproto::InitDefaultsAckUpTableErrorUcImpl();
};
// -------------------------------------------------------------------

class AckAheadDownTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.game.AckAheadDownTable) */ {
 public:
  AckAheadDownTable();
  virtual ~AckAheadDownTable();

  AckAheadDownTable(const AckAheadDownTable& from);

  inline AckAheadDownTable& operator=(const AckAheadDownTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckAheadDownTable(AckAheadDownTable&& from) noexcept
    : AckAheadDownTable() {
    *this = ::std::move(from);
  }

  inline AckAheadDownTable& operator=(AckAheadDownTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckAheadDownTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckAheadDownTable* internal_default_instance() {
    return reinterpret_cast<const AckAheadDownTable*>(
               &_AckAheadDownTable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(AckAheadDownTable* other);
  friend void swap(AckAheadDownTable& a, AckAheadDownTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckAheadDownTable* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckAheadDownTable>(NULL);
  }

  AckAheadDownTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckAheadDownTable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckAheadDownTable& from);
  void MergeFrom(const AckAheadDownTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckAheadDownTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // int32 seatid = 2;
  void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  ::google::protobuf::int32 seatid() const;
  void set_seatid(::google::protobuf::int32 value);

  // int32 down_tag = 3;
  void clear_down_tag();
  static const int kDownTagFieldNumber = 3;
  ::google::protobuf::int32 down_tag() const;
  void set_down_tag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckAheadDownTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 down_tag_;
  mutable int _cached_size_;
  friend struct ::protobuf_appproto_2eproto::TableStruct;
  friend void ::protobuf_appproto_2eproto::InitDefaultsAckAheadDownTableImpl();
};
// -------------------------------------------------------------------

class AckDownTableSuccess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.game.AckDownTableSuccess) */ {
 public:
  AckDownTableSuccess();
  virtual ~AckDownTableSuccess();

  AckDownTableSuccess(const AckDownTableSuccess& from);

  inline AckDownTableSuccess& operator=(const AckDownTableSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckDownTableSuccess(AckDownTableSuccess&& from) noexcept
    : AckDownTableSuccess() {
    *this = ::std::move(from);
  }

  inline AckDownTableSuccess& operator=(AckDownTableSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckDownTableSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckDownTableSuccess* internal_default_instance() {
    return reinterpret_cast<const AckDownTableSuccess*>(
               &_AckDownTableSuccess_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(AckDownTableSuccess* other);
  friend void swap(AckDownTableSuccess& a, AckDownTableSuccess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckDownTableSuccess* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckDownTableSuccess>(NULL);
  }

  AckDownTableSuccess* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckDownTableSuccess>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckDownTableSuccess& from);
  void MergeFrom(const AckDownTableSuccess& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckDownTableSuccess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // int32 seatid = 2;
  void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  ::google::protobuf::int32 seatid() const;
  void set_seatid(::google::protobuf::int32 value);

  // int32 money = 3;
  void clear_money();
  static const int kMoneyFieldNumber = 3;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckDownTableSuccess)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 money_;
  mutable int _cached_size_;
  friend struct ::protobuf_appproto_2eproto::TableStruct;
  friend void ::protobuf_appproto_2eproto::InitDefaultsAckDownTableSuccessImpl();
};
// -------------------------------------------------------------------

class AckPrereadyBC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.game.AckPrereadyBC) */ {
 public:
  AckPrereadyBC();
  virtual ~AckPrereadyBC();

  AckPrereadyBC(const AckPrereadyBC& from);

  inline AckPrereadyBC& operator=(const AckPrereadyBC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckPrereadyBC(AckPrereadyBC&& from) noexcept
    : AckPrereadyBC() {
    *this = ::std::move(from);
  }

  inline AckPrereadyBC& operator=(AckPrereadyBC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPrereadyBC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckPrereadyBC* internal_default_instance() {
    return reinterpret_cast<const AckPrereadyBC*>(
               &_AckPrereadyBC_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(AckPrereadyBC* other);
  friend void swap(AckPrereadyBC& a, AckPrereadyBC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckPrereadyBC* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckPrereadyBC>(NULL);
  }

  AckPrereadyBC* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckPrereadyBC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckPrereadyBC& from);
  void MergeFrom(const AckPrereadyBC& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckPrereadyBC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  const ::std::string& roomid() const;
  void set_roomid(const ::std::string& value);
  #if LANG_CXX11
  void set_roomid(::std::string&& value);
  #endif
  void set_roomid(const char* value);
  void set_roomid(const char* value, size_t size);
  ::std::string* mutable_roomid();
  ::std::string* release_roomid();
  void set_allocated_roomid(::std::string* roomid);

  // @@protoc_insertion_point(class_scope:proto.game.AckPrereadyBC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr roomid_;
  mutable int _cached_size_;
  friend struct ::protobuf_appproto_2eproto::TableStruct;
  friend void ::protobuf_appproto_2eproto::InitDefaultsAckPrereadyBCImpl();
};
// -------------------------------------------------------------------

class AckEmotionBC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.game.AckEmotionBC) */ {
 public:
  AckEmotionBC();
  virtual ~AckEmotionBC();

  AckEmotionBC(const AckEmotionBC& from);

  inline AckEmotionBC& operator=(const AckEmotionBC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckEmotionBC(AckEmotionBC&& from) noexcept
    : AckEmotionBC() {
    *this = ::std::move(from);
  }

  inline AckEmotionBC& operator=(AckEmotionBC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckEmotionBC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckEmotionBC* internal_default_instance() {
    return reinterpret_cast<const AckEmotionBC*>(
               &_AckEmotionBC_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(AckEmotionBC* other);
  friend void swap(AckEmotionBC& a, AckEmotionBC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckEmotionBC* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckEmotionBC>(NULL);
  }

  AckEmotionBC* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<AckEmotionBC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AckEmotionBC& from);
  void MergeFrom(const AckEmotionBC& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AckEmotionBC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 seatid = 1;
  void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  ::google::protobuf::int32 seatid() const;
  void set_seatid(::google::protobuf::int32 value);

  // int32 money = 2;
  void clear_money();
  static const int kMoneyFieldNumber = 2;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // int32 target_seatid = 3;
  void clear_target_seatid();
  static const int kTargetSeatidFieldNumber = 3;
  ::google::protobuf::int32 target_seatid() const;
  void set_target_seatid(::google::protobuf::int32 value);

  // int32 target_seat_num = 4;
  void clear_target_seat_num();
  static const int kTargetSeatNumFieldNumber = 4;
  ::google::protobuf::int32 target_seat_num() const;
  void set_target_seat_num(::google::protobuf::int32 value);

  // int32 type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckEmotionBC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 target_seatid_;
  ::google::protobuf::int32 target_seat_num_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_appproto_2eproto::TableStruct;
  friend void ::protobuf_appproto_2eproto::InitDefaultsAckEmotionBCImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqLogin

// int32 uid = 1;
inline void ReqLogin::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 ReqLogin::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqLogin.uid)
  return uid_;
}
inline void ReqLogin::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqLogin.uid)
}

// string skey = 2;
inline void ReqLogin::clear_skey() {
  skey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqLogin::skey() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqLogin.skey)
  return skey_.GetNoArena();
}
inline void ReqLogin::set_skey(const ::std::string& value) {
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.game.ReqLogin.skey)
}
#if LANG_CXX11
inline void ReqLogin::set_skey(::std::string&& value) {
  
  skey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.game.ReqLogin.skey)
}
#endif
inline void ReqLogin::set_skey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.game.ReqLogin.skey)
}
inline void ReqLogin::set_skey(const char* value, size_t size) {
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.game.ReqLogin.skey)
}
inline ::std::string* ReqLogin::mutable_skey() {
  
  // @@protoc_insertion_point(field_mutable:proto.game.ReqLogin.skey)
  return skey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqLogin::release_skey() {
  // @@protoc_insertion_point(field_release:proto.game.ReqLogin.skey)
  
  return skey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLogin::set_allocated_skey(::std::string* skey) {
  if (skey != NULL) {
    
  } else {
    
  }
  skey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skey);
  // @@protoc_insertion_point(field_set_allocated:proto.game.ReqLogin.skey)
}

// string roomid = 3;
inline void ReqLogin::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqLogin::roomid() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqLogin.roomid)
  return roomid_.GetNoArena();
}
inline void ReqLogin::set_roomid(const ::std::string& value) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.game.ReqLogin.roomid)
}
#if LANG_CXX11
inline void ReqLogin::set_roomid(::std::string&& value) {
  
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.game.ReqLogin.roomid)
}
#endif
inline void ReqLogin::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.game.ReqLogin.roomid)
}
inline void ReqLogin::set_roomid(const char* value, size_t size) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.game.ReqLogin.roomid)
}
inline ::std::string* ReqLogin::mutable_roomid() {
  
  // @@protoc_insertion_point(field_mutable:proto.game.ReqLogin.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqLogin::release_roomid() {
  // @@protoc_insertion_point(field_release:proto.game.ReqLogin.roomid)
  
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLogin::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    
  } else {
    
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:proto.game.ReqLogin.roomid)
}

// int32 req_count = 4;
inline void ReqLogin::clear_req_count() {
  req_count_ = 0;
}
inline ::google::protobuf::int32 ReqLogin::req_count() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqLogin.req_count)
  return req_count_;
}
inline void ReqLogin::set_req_count(::google::protobuf::int32 value) {
  
  req_count_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqLogin.req_count)
}

// -------------------------------------------------------------------

// ReqLogout

// int32 uid = 1;
inline void ReqLogout::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 ReqLogout::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqLogout.uid)
  return uid_;
}
inline void ReqLogout::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqLogout.uid)
}

// -------------------------------------------------------------------

// AckLoginSuccessUc

// int32 seatid = 1;
inline void AckLoginSuccessUc::clear_seatid() {
  seatid_ = 0;
}
inline ::google::protobuf::int32 AckLoginSuccessUc::seatid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginSuccessUc.seatid)
  return seatid_;
}
inline void AckLoginSuccessUc::set_seatid(::google::protobuf::int32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLoginSuccessUc.seatid)
}

// string avatar = 2;
inline void AckLoginSuccessUc::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckLoginSuccessUc::avatar() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginSuccessUc.avatar)
  return avatar_.GetNoArena();
}
inline void AckLoginSuccessUc::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.game.AckLoginSuccessUc.avatar)
}
#if LANG_CXX11
inline void AckLoginSuccessUc::set_avatar(::std::string&& value) {
  
  avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.game.AckLoginSuccessUc.avatar)
}
#endif
inline void AckLoginSuccessUc::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.game.AckLoginSuccessUc.avatar)
}
inline void AckLoginSuccessUc::set_avatar(const char* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckLoginSuccessUc.avatar)
}
inline ::std::string* AckLoginSuccessUc::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:proto.game.AckLoginSuccessUc.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckLoginSuccessUc::release_avatar() {
  // @@protoc_insertion_point(field_release:proto.game.AckLoginSuccessUc.avatar)
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckLoginSuccessUc::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckLoginSuccessUc.avatar)
}

// int32 exp = 3;
inline void AckLoginSuccessUc::clear_exp() {
  exp_ = 0;
}
inline ::google::protobuf::int32 AckLoginSuccessUc::exp() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginSuccessUc.exp)
  return exp_;
}
inline void AckLoginSuccessUc::set_exp(::google::protobuf::int32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLoginSuccessUc.exp)
}

// int32 money = 4;
inline void AckLoginSuccessUc::clear_money() {
  money_ = 0;
}
inline ::google::protobuf::int32 AckLoginSuccessUc::money() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginSuccessUc.money)
  return money_;
}
inline void AckLoginSuccessUc::set_money(::google::protobuf::int32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLoginSuccessUc.money)
}

// string name = 5;
inline void AckLoginSuccessUc::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckLoginSuccessUc::name() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginSuccessUc.name)
  return name_.GetNoArena();
}
inline void AckLoginSuccessUc::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.game.AckLoginSuccessUc.name)
}
#if LANG_CXX11
inline void AckLoginSuccessUc::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.game.AckLoginSuccessUc.name)
}
#endif
inline void AckLoginSuccessUc::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.game.AckLoginSuccessUc.name)
}
inline void AckLoginSuccessUc::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckLoginSuccessUc.name)
}
inline ::std::string* AckLoginSuccessUc::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.game.AckLoginSuccessUc.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckLoginSuccessUc::release_name() {
  // @@protoc_insertion_point(field_release:proto.game.AckLoginSuccessUc.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckLoginSuccessUc::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckLoginSuccessUc.name)
}

// int32 ready = 6;
inline void AckLoginSuccessUc::clear_ready() {
  ready_ = 0;
}
inline ::google::protobuf::int32 AckLoginSuccessUc::ready() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginSuccessUc.ready)
  return ready_;
}
inline void AckLoginSuccessUc::set_ready(::google::protobuf::int32 value) {
  
  ready_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLoginSuccessUc.ready)
}

// int32 rmb = 7;
inline void AckLoginSuccessUc::clear_rmb() {
  rmb_ = 0;
}
inline ::google::protobuf::int32 AckLoginSuccessUc::rmb() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginSuccessUc.rmb)
  return rmb_;
}
inline void AckLoginSuccessUc::set_rmb(::google::protobuf::int32 value) {
  
  rmb_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLoginSuccessUc.rmb)
}

// int32 see = 8;
inline void AckLoginSuccessUc::clear_see() {
  see_ = 0;
}
inline ::google::protobuf::int32 AckLoginSuccessUc::see() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginSuccessUc.see)
  return see_;
}
inline void AckLoginSuccessUc::set_see(::google::protobuf::int32 value) {
  
  see_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLoginSuccessUc.see)
}

// int32 sex = 9;
inline void AckLoginSuccessUc::clear_sex() {
  sex_ = 0;
}
inline ::google::protobuf::int32 AckLoginSuccessUc::sex() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginSuccessUc.sex)
  return sex_;
}
inline void AckLoginSuccessUc::set_sex(::google::protobuf::int32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLoginSuccessUc.sex)
}

// int32 uid = 10;
inline void AckLoginSuccessUc::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 AckLoginSuccessUc::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginSuccessUc.uid)
  return uid_;
}
inline void AckLoginSuccessUc::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLoginSuccessUc.uid)
}

// -------------------------------------------------------------------

// AckLoginSuccessBc

// int32 seatid = 1;
inline void AckLoginSuccessBc::clear_seatid() {
  seatid_ = 0;
}
inline ::google::protobuf::int32 AckLoginSuccessBc::seatid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginSuccessBc.seatid)
  return seatid_;
}
inline void AckLoginSuccessBc::set_seatid(::google::protobuf::int32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLoginSuccessBc.seatid)
}

// int32 uid = 2;
inline void AckLoginSuccessBc::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 AckLoginSuccessBc::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginSuccessBc.uid)
  return uid_;
}
inline void AckLoginSuccessBc::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLoginSuccessBc.uid)
}

// int32 money = 3;
inline void AckLoginSuccessBc::clear_money() {
  money_ = 0;
}
inline ::google::protobuf::int32 AckLoginSuccessBc::money() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginSuccessBc.money)
  return money_;
}
inline void AckLoginSuccessBc::set_money(::google::protobuf::int32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLoginSuccessBc.money)
}

// string name = 4;
inline void AckLoginSuccessBc::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckLoginSuccessBc::name() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginSuccessBc.name)
  return name_.GetNoArena();
}
inline void AckLoginSuccessBc::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.game.AckLoginSuccessBc.name)
}
#if LANG_CXX11
inline void AckLoginSuccessBc::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.game.AckLoginSuccessBc.name)
}
#endif
inline void AckLoginSuccessBc::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.game.AckLoginSuccessBc.name)
}
inline void AckLoginSuccessBc::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckLoginSuccessBc.name)
}
inline ::std::string* AckLoginSuccessBc::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.game.AckLoginSuccessBc.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckLoginSuccessBc::release_name() {
  // @@protoc_insertion_point(field_release:proto.game.AckLoginSuccessBc.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckLoginSuccessBc::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckLoginSuccessBc.name)
}

// string avatar = 5;
inline void AckLoginSuccessBc::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckLoginSuccessBc::avatar() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginSuccessBc.avatar)
  return avatar_.GetNoArena();
}
inline void AckLoginSuccessBc::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.game.AckLoginSuccessBc.avatar)
}
#if LANG_CXX11
inline void AckLoginSuccessBc::set_avatar(::std::string&& value) {
  
  avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.game.AckLoginSuccessBc.avatar)
}
#endif
inline void AckLoginSuccessBc::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.game.AckLoginSuccessBc.avatar)
}
inline void AckLoginSuccessBc::set_avatar(const char* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckLoginSuccessBc.avatar)
}
inline ::std::string* AckLoginSuccessBc::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:proto.game.AckLoginSuccessBc.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckLoginSuccessBc::release_avatar() {
  // @@protoc_insertion_point(field_release:proto.game.AckLoginSuccessBc.avatar)
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckLoginSuccessBc::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckLoginSuccessBc.avatar)
}

// int32 sex = 6;
inline void AckLoginSuccessBc::clear_sex() {
  sex_ = 0;
}
inline ::google::protobuf::int32 AckLoginSuccessBc::sex() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginSuccessBc.sex)
  return sex_;
}
inline void AckLoginSuccessBc::set_sex(::google::protobuf::int32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLoginSuccessBc.sex)
}

// -------------------------------------------------------------------

// AckLoginError

// int32 uid = 1;
inline void AckLoginError::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 AckLoginError::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginError.uid)
  return uid_;
}
inline void AckLoginError::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLoginError.uid)
}

// int32 code = 2;
inline void AckLoginError::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 AckLoginError::code() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLoginError.code)
  return code_;
}
inline void AckLoginError::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLoginError.code)
}

// -------------------------------------------------------------------

// AckLogoutBc

// int32 seatid = 1;
inline void AckLogoutBc::clear_seatid() {
  seatid_ = 0;
}
inline ::google::protobuf::int32 AckLogoutBc::seatid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLogoutBc.seatid)
  return seatid_;
}
inline void AckLogoutBc::set_seatid(::google::protobuf::int32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLogoutBc.seatid)
}

// int32 uid = 2;
inline void AckLogoutBc::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 AckLogoutBc::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLogoutBc.uid)
  return uid_;
}
inline void AckLogoutBc::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLogoutBc.uid)
}

// int32 type = 3;
inline void AckLogoutBc::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 AckLogoutBc::type() const {
  // @@protoc_insertion_point(field_get:proto.game.AckLogoutBc.type)
  return type_;
}
inline void AckLogoutBc::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckLogoutBc.type)
}

// -------------------------------------------------------------------

// AckUpTableSuccess

// int32 uid = 1;
inline void AckUpTableSuccess::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 AckUpTableSuccess::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpTableSuccess.uid)
  return uid_;
}
inline void AckUpTableSuccess::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUpTableSuccess.uid)
}

// int32 seatid = 2;
inline void AckUpTableSuccess::clear_seatid() {
  seatid_ = 0;
}
inline ::google::protobuf::int32 AckUpTableSuccess::seatid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpTableSuccess.seatid)
  return seatid_;
}
inline void AckUpTableSuccess::set_seatid(::google::protobuf::int32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUpTableSuccess.seatid)
}

// int32 ready = 3;
inline void AckUpTableSuccess::clear_ready() {
  ready_ = 0;
}
inline ::google::protobuf::int32 AckUpTableSuccess::ready() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpTableSuccess.ready)
  return ready_;
}
inline void AckUpTableSuccess::set_ready(::google::protobuf::int32 value) {
  
  ready_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUpTableSuccess.ready)
}

// string name = 4;
inline void AckUpTableSuccess::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckUpTableSuccess::name() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpTableSuccess.name)
  return name_.GetNoArena();
}
inline void AckUpTableSuccess::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.game.AckUpTableSuccess.name)
}
#if LANG_CXX11
inline void AckUpTableSuccess::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.game.AckUpTableSuccess.name)
}
#endif
inline void AckUpTableSuccess::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.game.AckUpTableSuccess.name)
}
inline void AckUpTableSuccess::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckUpTableSuccess.name)
}
inline ::std::string* AckUpTableSuccess::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.game.AckUpTableSuccess.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckUpTableSuccess::release_name() {
  // @@protoc_insertion_point(field_release:proto.game.AckUpTableSuccess.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckUpTableSuccess::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckUpTableSuccess.name)
}

// int32 sex = 5;
inline void AckUpTableSuccess::clear_sex() {
  sex_ = 0;
}
inline ::google::protobuf::int32 AckUpTableSuccess::sex() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpTableSuccess.sex)
  return sex_;
}
inline void AckUpTableSuccess::set_sex(::google::protobuf::int32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUpTableSuccess.sex)
}

// string avatar = 6;
inline void AckUpTableSuccess::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckUpTableSuccess::avatar() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpTableSuccess.avatar)
  return avatar_.GetNoArena();
}
inline void AckUpTableSuccess::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.game.AckUpTableSuccess.avatar)
}
#if LANG_CXX11
inline void AckUpTableSuccess::set_avatar(::std::string&& value) {
  
  avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.game.AckUpTableSuccess.avatar)
}
#endif
inline void AckUpTableSuccess::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.game.AckUpTableSuccess.avatar)
}
inline void AckUpTableSuccess::set_avatar(const char* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckUpTableSuccess.avatar)
}
inline ::std::string* AckUpTableSuccess::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:proto.game.AckUpTableSuccess.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckUpTableSuccess::release_avatar() {
  // @@protoc_insertion_point(field_release:proto.game.AckUpTableSuccess.avatar)
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckUpTableSuccess::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckUpTableSuccess.avatar)
}

// int32 money = 7;
inline void AckUpTableSuccess::clear_money() {
  money_ = 0;
}
inline ::google::protobuf::int32 AckUpTableSuccess::money() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpTableSuccess.money)
  return money_;
}
inline void AckUpTableSuccess::set_money(::google::protobuf::int32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUpTableSuccess.money)
}

// int32 exp = 8;
inline void AckUpTableSuccess::clear_exp() {
  exp_ = 0;
}
inline ::google::protobuf::int32 AckUpTableSuccess::exp() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpTableSuccess.exp)
  return exp_;
}
inline void AckUpTableSuccess::set_exp(::google::protobuf::int32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUpTableSuccess.exp)
}

// -------------------------------------------------------------------

// AckUpTableErrorUc

// int32 uid = 1;
inline void AckUpTableErrorUc::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 AckUpTableErrorUc::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpTableErrorUc.uid)
  return uid_;
}
inline void AckUpTableErrorUc::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUpTableErrorUc.uid)
}

// int32 money = 2;
inline void AckUpTableErrorUc::clear_money() {
  money_ = 0;
}
inline ::google::protobuf::int32 AckUpTableErrorUc::money() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpTableErrorUc.money)
  return money_;
}
inline void AckUpTableErrorUc::set_money(::google::protobuf::int32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUpTableErrorUc.money)
}

// int32 code = 3;
inline void AckUpTableErrorUc::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 AckUpTableErrorUc::code() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpTableErrorUc.code)
  return code_;
}
inline void AckUpTableErrorUc::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUpTableErrorUc.code)
}

// -------------------------------------------------------------------

// AckAheadDownTable

// int32 uid = 1;
inline void AckAheadDownTable::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 AckAheadDownTable::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckAheadDownTable.uid)
  return uid_;
}
inline void AckAheadDownTable::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckAheadDownTable.uid)
}

// int32 seatid = 2;
inline void AckAheadDownTable::clear_seatid() {
  seatid_ = 0;
}
inline ::google::protobuf::int32 AckAheadDownTable::seatid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckAheadDownTable.seatid)
  return seatid_;
}
inline void AckAheadDownTable::set_seatid(::google::protobuf::int32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckAheadDownTable.seatid)
}

// int32 down_tag = 3;
inline void AckAheadDownTable::clear_down_tag() {
  down_tag_ = 0;
}
inline ::google::protobuf::int32 AckAheadDownTable::down_tag() const {
  // @@protoc_insertion_point(field_get:proto.game.AckAheadDownTable.down_tag)
  return down_tag_;
}
inline void AckAheadDownTable::set_down_tag(::google::protobuf::int32 value) {
  
  down_tag_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckAheadDownTable.down_tag)
}

// -------------------------------------------------------------------

// AckDownTableSuccess

// int32 uid = 1;
inline void AckDownTableSuccess::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 AckDownTableSuccess::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckDownTableSuccess.uid)
  return uid_;
}
inline void AckDownTableSuccess::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckDownTableSuccess.uid)
}

// int32 seatid = 2;
inline void AckDownTableSuccess::clear_seatid() {
  seatid_ = 0;
}
inline ::google::protobuf::int32 AckDownTableSuccess::seatid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckDownTableSuccess.seatid)
  return seatid_;
}
inline void AckDownTableSuccess::set_seatid(::google::protobuf::int32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckDownTableSuccess.seatid)
}

// int32 money = 3;
inline void AckDownTableSuccess::clear_money() {
  money_ = 0;
}
inline ::google::protobuf::int32 AckDownTableSuccess::money() const {
  // @@protoc_insertion_point(field_get:proto.game.AckDownTableSuccess.money)
  return money_;
}
inline void AckDownTableSuccess::set_money(::google::protobuf::int32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckDownTableSuccess.money)
}

// -------------------------------------------------------------------

// AckPrereadyBC

// string roomid = 1;
inline void AckPrereadyBC::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckPrereadyBC::roomid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckPrereadyBC.roomid)
  return roomid_.GetNoArena();
}
inline void AckPrereadyBC::set_roomid(const ::std::string& value) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.game.AckPrereadyBC.roomid)
}
#if LANG_CXX11
inline void AckPrereadyBC::set_roomid(::std::string&& value) {
  
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.game.AckPrereadyBC.roomid)
}
#endif
inline void AckPrereadyBC::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.game.AckPrereadyBC.roomid)
}
inline void AckPrereadyBC::set_roomid(const char* value, size_t size) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckPrereadyBC.roomid)
}
inline ::std::string* AckPrereadyBC::mutable_roomid() {
  
  // @@protoc_insertion_point(field_mutable:proto.game.AckPrereadyBC.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckPrereadyBC::release_roomid() {
  // @@protoc_insertion_point(field_release:proto.game.AckPrereadyBC.roomid)
  
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckPrereadyBC::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    
  } else {
    
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckPrereadyBC.roomid)
}

// -------------------------------------------------------------------

// AckEmotionBC

// int32 seatid = 1;
inline void AckEmotionBC::clear_seatid() {
  seatid_ = 0;
}
inline ::google::protobuf::int32 AckEmotionBC::seatid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckEmotionBC.seatid)
  return seatid_;
}
inline void AckEmotionBC::set_seatid(::google::protobuf::int32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckEmotionBC.seatid)
}

// int32 money = 2;
inline void AckEmotionBC::clear_money() {
  money_ = 0;
}
inline ::google::protobuf::int32 AckEmotionBC::money() const {
  // @@protoc_insertion_point(field_get:proto.game.AckEmotionBC.money)
  return money_;
}
inline void AckEmotionBC::set_money(::google::protobuf::int32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckEmotionBC.money)
}

// int32 target_seatid = 3;
inline void AckEmotionBC::clear_target_seatid() {
  target_seatid_ = 0;
}
inline ::google::protobuf::int32 AckEmotionBC::target_seatid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckEmotionBC.target_seatid)
  return target_seatid_;
}
inline void AckEmotionBC::set_target_seatid(::google::protobuf::int32 value) {
  
  target_seatid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckEmotionBC.target_seatid)
}

// int32 target_seat_num = 4;
inline void AckEmotionBC::clear_target_seat_num() {
  target_seat_num_ = 0;
}
inline ::google::protobuf::int32 AckEmotionBC::target_seat_num() const {
  // @@protoc_insertion_point(field_get:proto.game.AckEmotionBC.target_seat_num)
  return target_seat_num_;
}
inline void AckEmotionBC::set_target_seat_num(::google::protobuf::int32 value) {
  
  target_seat_num_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckEmotionBC.target_seat_num)
}

// int32 type = 5;
inline void AckEmotionBC::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 AckEmotionBC::type() const {
  // @@protoc_insertion_point(field_get:proto.game.AckEmotionBC.type)
  return type_;
}
inline void AckEmotionBC::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckEmotionBC.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_appproto_2eproto_INCLUDED
