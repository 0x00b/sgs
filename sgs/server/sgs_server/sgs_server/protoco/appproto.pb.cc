// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appproto.proto

#include "appproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace proto {
namespace game {
class ReqLoginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqLogin>
      _instance;
} _ReqLogin_default_instance_;
class ReqLogoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqLogout>
      _instance;
} _ReqLogout_default_instance_;
class AckLoginSuccessUcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckLoginSuccessUc>
      _instance;
} _AckLoginSuccessUc_default_instance_;
class AckLoginSuccessBcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckLoginSuccessBc>
      _instance;
} _AckLoginSuccessBc_default_instance_;
class AckLoginErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckLoginError>
      _instance;
} _AckLoginError_default_instance_;
class AckLogoutBcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckLogoutBc>
      _instance;
} _AckLogoutBc_default_instance_;
class AckUpTableSuccessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckUpTableSuccess>
      _instance;
} _AckUpTableSuccess_default_instance_;
class AckUpTableErrorUcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckUpTableErrorUc>
      _instance;
} _AckUpTableErrorUc_default_instance_;
class AckAheadDownTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckAheadDownTable>
      _instance;
} _AckAheadDownTable_default_instance_;
class AckDownTableSuccessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckDownTableSuccess>
      _instance;
} _AckDownTableSuccess_default_instance_;
class AckPrereadyBCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckPrereadyBC>
      _instance;
} _AckPrereadyBC_default_instance_;
class AckEmotionBCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckEmotionBC>
      _instance;
} _AckEmotionBC_default_instance_;
}  // namespace game
}  // namespace proto
namespace protobuf_appproto_2eproto {
void InitDefaultsReqLoginImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::game::_ReqLogin_default_instance_;
    new (ptr) ::proto::game::ReqLogin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::game::ReqLogin::InitAsDefaultInstance();
}

void InitDefaultsReqLogin() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqLoginImpl);
}

void InitDefaultsReqLogoutImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::game::_ReqLogout_default_instance_;
    new (ptr) ::proto::game::ReqLogout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::game::ReqLogout::InitAsDefaultInstance();
}

void InitDefaultsReqLogout() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReqLogoutImpl);
}

void InitDefaultsAckLoginSuccessUcImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::game::_AckLoginSuccessUc_default_instance_;
    new (ptr) ::proto::game::AckLoginSuccessUc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::game::AckLoginSuccessUc::InitAsDefaultInstance();
}

void InitDefaultsAckLoginSuccessUc() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckLoginSuccessUcImpl);
}

void InitDefaultsAckLoginSuccessBcImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::game::_AckLoginSuccessBc_default_instance_;
    new (ptr) ::proto::game::AckLoginSuccessBc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::game::AckLoginSuccessBc::InitAsDefaultInstance();
}

void InitDefaultsAckLoginSuccessBc() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckLoginSuccessBcImpl);
}

void InitDefaultsAckLoginErrorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::game::_AckLoginError_default_instance_;
    new (ptr) ::proto::game::AckLoginError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::game::AckLoginError::InitAsDefaultInstance();
}

void InitDefaultsAckLoginError() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckLoginErrorImpl);
}

void InitDefaultsAckLogoutBcImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::game::_AckLogoutBc_default_instance_;
    new (ptr) ::proto::game::AckLogoutBc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::game::AckLogoutBc::InitAsDefaultInstance();
}

void InitDefaultsAckLogoutBc() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckLogoutBcImpl);
}

void InitDefaultsAckUpTableSuccessImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::game::_AckUpTableSuccess_default_instance_;
    new (ptr) ::proto::game::AckUpTableSuccess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::game::AckUpTableSuccess::InitAsDefaultInstance();
}

void InitDefaultsAckUpTableSuccess() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckUpTableSuccessImpl);
}

void InitDefaultsAckUpTableErrorUcImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::game::_AckUpTableErrorUc_default_instance_;
    new (ptr) ::proto::game::AckUpTableErrorUc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::game::AckUpTableErrorUc::InitAsDefaultInstance();
}

void InitDefaultsAckUpTableErrorUc() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckUpTableErrorUcImpl);
}

void InitDefaultsAckAheadDownTableImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::game::_AckAheadDownTable_default_instance_;
    new (ptr) ::proto::game::AckAheadDownTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::game::AckAheadDownTable::InitAsDefaultInstance();
}

void InitDefaultsAckAheadDownTable() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckAheadDownTableImpl);
}

void InitDefaultsAckDownTableSuccessImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::game::_AckDownTableSuccess_default_instance_;
    new (ptr) ::proto::game::AckDownTableSuccess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::game::AckDownTableSuccess::InitAsDefaultInstance();
}

void InitDefaultsAckDownTableSuccess() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckDownTableSuccessImpl);
}

void InitDefaultsAckPrereadyBCImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::game::_AckPrereadyBC_default_instance_;
    new (ptr) ::proto::game::AckPrereadyBC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::game::AckPrereadyBC::InitAsDefaultInstance();
}

void InitDefaultsAckPrereadyBC() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckPrereadyBCImpl);
}

void InitDefaultsAckEmotionBCImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::game::_AckEmotionBC_default_instance_;
    new (ptr) ::proto::game::AckEmotionBC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::game::AckEmotionBC::InitAsDefaultInstance();
}

void InitDefaultsAckEmotionBC() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAckEmotionBCImpl);
}

::google::protobuf::Metadata file_level_metadata[12];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::ReqLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::ReqLogin, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::ReqLogin, skey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::ReqLogin, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::ReqLogin, req_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::ReqLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::ReqLogout, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessUc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessUc, seatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessUc, avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessUc, exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessUc, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessUc, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessUc, ready_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessUc, rmb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessUc, see_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessUc, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessUc, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessBc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessBc, seatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessBc, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessBc, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessBc, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessBc, avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginSuccessBc, sex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginError, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLoginError, code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLogoutBc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLogoutBc, seatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLogoutBc, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckLogoutBc, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckUpTableSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckUpTableSuccess, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckUpTableSuccess, seatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckUpTableSuccess, ready_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckUpTableSuccess, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckUpTableSuccess, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckUpTableSuccess, avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckUpTableSuccess, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckUpTableSuccess, exp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckUpTableErrorUc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckUpTableErrorUc, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckUpTableErrorUc, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckUpTableErrorUc, code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckAheadDownTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckAheadDownTable, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckAheadDownTable, seatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckAheadDownTable, down_tag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckDownTableSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckDownTableSuccess, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckDownTableSuccess, seatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckDownTableSuccess, money_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckPrereadyBC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckPrereadyBC, roomid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckEmotionBC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckEmotionBC, seatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckEmotionBC, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckEmotionBC, target_seatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckEmotionBC, target_seat_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::game::AckEmotionBC, type_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::game::ReqLogin)},
  { 9, -1, sizeof(::proto::game::ReqLogout)},
  { 15, -1, sizeof(::proto::game::AckLoginSuccessUc)},
  { 30, -1, sizeof(::proto::game::AckLoginSuccessBc)},
  { 41, -1, sizeof(::proto::game::AckLoginError)},
  { 48, -1, sizeof(::proto::game::AckLogoutBc)},
  { 56, -1, sizeof(::proto::game::AckUpTableSuccess)},
  { 69, -1, sizeof(::proto::game::AckUpTableErrorUc)},
  { 77, -1, sizeof(::proto::game::AckAheadDownTable)},
  { 85, -1, sizeof(::proto::game::AckDownTableSuccess)},
  { 93, -1, sizeof(::proto::game::AckPrereadyBC)},
  { 99, -1, sizeof(::proto::game::AckEmotionBC)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::game::_ReqLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::game::_ReqLogout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::game::_AckLoginSuccessUc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::game::_AckLoginSuccessBc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::game::_AckLoginError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::game::_AckLogoutBc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::game::_AckUpTableSuccess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::game::_AckUpTableErrorUc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::game::_AckAheadDownTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::game::_AckDownTableSuccess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::game::_AckPrereadyBC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::game::_AckEmotionBC_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "appproto.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016appproto.proto\022\nproto.game\"H\n\010ReqLogin"
      "\022\013\n\003uid\030\001 \001(\005\022\014\n\004skey\030\002 \001(\t\022\016\n\006roomid\030\003 "
      "\001(\t\022\021\n\treq_count\030\004 \001(\005\"\030\n\tReqLogout\022\013\n\003u"
      "id\030\001 \001(\005\"\240\001\n\021AckLoginSuccessUc\022\016\n\006seatid"
      "\030\001 \001(\005\022\016\n\006avatar\030\002 \001(\t\022\013\n\003exp\030\003 \001(\005\022\r\n\005m"
      "oney\030\004 \001(\005\022\014\n\004name\030\005 \001(\t\022\r\n\005ready\030\006 \001(\005\022"
      "\013\n\003rmb\030\007 \001(\005\022\013\n\003see\030\010 \001(\005\022\013\n\003sex\030\t \001(\005\022\013"
      "\n\003uid\030\n \001(\005\"j\n\021AckLoginSuccessBc\022\016\n\006seat"
      "id\030\001 \001(\005\022\013\n\003uid\030\002 \001(\005\022\r\n\005money\030\003 \001(\005\022\014\n\004"
      "name\030\004 \001(\t\022\016\n\006avatar\030\005 \001(\t\022\013\n\003sex\030\006 \001(\005\""
      "*\n\rAckLoginError\022\013\n\003uid\030\001 \001(\005\022\014\n\004code\030\002 "
      "\001(\005\"8\n\013AckLogoutBc\022\016\n\006seatid\030\001 \001(\005\022\013\n\003ui"
      "d\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\"\206\001\n\021AckUpTableSucc"
      "ess\022\013\n\003uid\030\001 \001(\005\022\016\n\006seatid\030\002 \001(\005\022\r\n\005read"
      "y\030\003 \001(\005\022\014\n\004name\030\004 \001(\t\022\013\n\003sex\030\005 \001(\005\022\016\n\006av"
      "atar\030\006 \001(\t\022\r\n\005money\030\007 \001(\005\022\013\n\003exp\030\010 \001(\005\"="
      "\n\021AckUpTableErrorUc\022\013\n\003uid\030\001 \001(\005\022\r\n\005mone"
      "y\030\002 \001(\005\022\014\n\004code\030\003 \001(\005\"B\n\021AckAheadDownTab"
      "le\022\013\n\003uid\030\001 \001(\005\022\016\n\006seatid\030\002 \001(\005\022\020\n\010down_"
      "tag\030\003 \001(\005\"A\n\023AckDownTableSuccess\022\013\n\003uid\030"
      "\001 \001(\005\022\016\n\006seatid\030\002 \001(\005\022\r\n\005money\030\003 \001(\005\"\037\n\r"
      "AckPrereadyBC\022\016\n\006roomid\030\001 \001(\t\"k\n\014AckEmot"
      "ionBC\022\016\n\006seatid\030\001 \001(\005\022\r\n\005money\030\002 \001(\005\022\025\n\r"
      "target_seatid\030\003 \001(\005\022\027\n\017target_seat_num\030\004"
      " \001(\005\022\014\n\004type\030\005 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 986);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "appproto.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_appproto_2eproto
namespace proto {
namespace game {

// ===================================================================

void ReqLogin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqLogin::kUidFieldNumber;
const int ReqLogin::kSkeyFieldNumber;
const int ReqLogin::kRoomidFieldNumber;
const int ReqLogin::kReqCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLogin::ReqLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_appproto_2eproto::InitDefaultsReqLogin();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.ReqLogin)
}
ReqLogin::ReqLogin(const ReqLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.skey().size() > 0) {
    skey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skey_);
  }
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.roomid().size() > 0) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_count_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(req_count_));
  // @@protoc_insertion_point(copy_constructor:proto.game.ReqLogin)
}

void ReqLogin::SharedCtor() {
  skey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_count_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(req_count_));
  _cached_size_ = 0;
}

ReqLogin::~ReqLogin() {
  // @@protoc_insertion_point(destructor:proto.game.ReqLogin)
  SharedDtor();
}

void ReqLogin::SharedDtor() {
  skey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogin::descriptor() {
  ::protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqLogin& ReqLogin::default_instance() {
  ::protobuf_appproto_2eproto::InitDefaultsReqLogin();
  return *internal_default_instance();
}


void ReqLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.game.ReqLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_count_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(req_count_));
  _internal_metadata_.Clear();
}

bool ReqLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.ReqLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string skey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->skey().data(), static_cast<int>(this->skey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.game.ReqLogin.skey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string roomid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomid().data(), static_cast<int>(this->roomid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.game.ReqLogin.roomid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 req_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.ReqLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.ReqLogin)
  return false;
#undef DO_
}

void ReqLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.ReqLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // string skey = 2;
  if (this->skey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skey().data(), static_cast<int>(this->skey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.ReqLogin.skey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->skey(), output);
  }

  // string roomid = 3;
  if (this->roomid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomid().data(), static_cast<int>(this->roomid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.ReqLogin.roomid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomid(), output);
  }

  // int32 req_count = 4;
  if (this->req_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->req_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.ReqLogin)
}

::google::protobuf::uint8* ReqLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.ReqLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // string skey = 2;
  if (this->skey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skey().data(), static_cast<int>(this->skey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.ReqLogin.skey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->skey(), target);
  }

  // string roomid = 3;
  if (this->roomid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomid().data(), static_cast<int>(this->roomid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.ReqLogin.roomid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roomid(), target);
  }

  // int32 req_count = 4;
  if (this->req_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->req_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.ReqLogin)
  return target;
}

size_t ReqLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.game.ReqLogin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string skey = 2;
  if (this->skey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->skey());
  }

  // string roomid = 3;
  if (this->roomid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomid());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  // int32 req_count = 4;
  if (this->req_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->req_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.game.ReqLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.game.ReqLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.game.ReqLogin)
    MergeFrom(*source);
  }
}

void ReqLogin::MergeFrom(const ReqLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.game.ReqLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skey().size() > 0) {

    skey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skey_);
  }
  if (from.roomid().size() > 0) {

    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.req_count() != 0) {
    set_req_count(from.req_count());
  }
}

void ReqLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.game.ReqLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogin::CopyFrom(const ReqLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.game.ReqLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogin::IsInitialized() const {
  return true;
}

void ReqLogin::Swap(ReqLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLogin::InternalSwap(ReqLogin* other) {
  using std::swap;
  skey_.Swap(&other->skey_);
  roomid_.Swap(&other->roomid_);
  swap(uid_, other->uid_);
  swap(req_count_, other->req_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqLogin::GetMetadata() const {
  protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqLogout::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqLogout::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLogout::ReqLogout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_appproto_2eproto::InitDefaultsReqLogout();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.ReqLogout)
}
ReqLogout::ReqLogout(const ReqLogout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:proto.game.ReqLogout)
}

void ReqLogout::SharedCtor() {
  uid_ = 0;
  _cached_size_ = 0;
}

ReqLogout::~ReqLogout() {
  // @@protoc_insertion_point(destructor:proto.game.ReqLogout)
  SharedDtor();
}

void ReqLogout::SharedDtor() {
}

void ReqLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogout::descriptor() {
  ::protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqLogout& ReqLogout::default_instance() {
  ::protobuf_appproto_2eproto::InitDefaultsReqLogout();
  return *internal_default_instance();
}


void ReqLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.game.ReqLogout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

bool ReqLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.ReqLogout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.ReqLogout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.ReqLogout)
  return false;
#undef DO_
}

void ReqLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.ReqLogout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.ReqLogout)
}

::google::protobuf::uint8* ReqLogout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.ReqLogout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.ReqLogout)
  return target;
}

size_t ReqLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.game.ReqLogout)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.game.ReqLogout)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLogout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLogout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.game.ReqLogout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.game.ReqLogout)
    MergeFrom(*source);
  }
}

void ReqLogout::MergeFrom(const ReqLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.game.ReqLogout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void ReqLogout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.game.ReqLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogout::CopyFrom(const ReqLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.game.ReqLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogout::IsInitialized() const {
  return true;
}

void ReqLogout::Swap(ReqLogout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLogout::InternalSwap(ReqLogout* other) {
  using std::swap;
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqLogout::GetMetadata() const {
  protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckLoginSuccessUc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckLoginSuccessUc::kSeatidFieldNumber;
const int AckLoginSuccessUc::kAvatarFieldNumber;
const int AckLoginSuccessUc::kExpFieldNumber;
const int AckLoginSuccessUc::kMoneyFieldNumber;
const int AckLoginSuccessUc::kNameFieldNumber;
const int AckLoginSuccessUc::kReadyFieldNumber;
const int AckLoginSuccessUc::kRmbFieldNumber;
const int AckLoginSuccessUc::kSeeFieldNumber;
const int AckLoginSuccessUc::kSexFieldNumber;
const int AckLoginSuccessUc::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckLoginSuccessUc::AckLoginSuccessUc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_appproto_2eproto::InitDefaultsAckLoginSuccessUc();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckLoginSuccessUc)
}
AckLoginSuccessUc::AckLoginSuccessUc(const AckLoginSuccessUc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.avatar().size() > 0) {
    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&seatid_, &from.seatid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&seatid_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:proto.game.AckLoginSuccessUc)
}

void AckLoginSuccessUc::SharedCtor() {
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&seatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&seatid_)) + sizeof(uid_));
  _cached_size_ = 0;
}

AckLoginSuccessUc::~AckLoginSuccessUc() {
  // @@protoc_insertion_point(destructor:proto.game.AckLoginSuccessUc)
  SharedDtor();
}

void AckLoginSuccessUc::SharedDtor() {
  avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AckLoginSuccessUc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLoginSuccessUc::descriptor() {
  ::protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckLoginSuccessUc& AckLoginSuccessUc::default_instance() {
  ::protobuf_appproto_2eproto::InitDefaultsAckLoginSuccessUc();
  return *internal_default_instance();
}


void AckLoginSuccessUc::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.game.AckLoginSuccessUc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&seatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&seatid_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

bool AckLoginSuccessUc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckLoginSuccessUc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 seatid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string avatar = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar().data(), static_cast<int>(this->avatar().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.game.AckLoginSuccessUc.avatar"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 money = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.game.AckLoginSuccessUc.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ready = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rmb = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 see = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &see_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sex = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 uid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckLoginSuccessUc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckLoginSuccessUc)
  return false;
#undef DO_
}

void AckLoginSuccessUc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckLoginSuccessUc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seatid = 1;
  if (this->seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // string avatar = 2;
  if (this->avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar().data(), static_cast<int>(this->avatar().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.AckLoginSuccessUc.avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->avatar(), output);
  }

  // int32 exp = 3;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // int32 money = 4;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->money(), output);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.AckLoginSuccessUc.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // int32 ready = 6;
  if (this->ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ready(), output);
  }

  // int32 rmb = 7;
  if (this->rmb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rmb(), output);
  }

  // int32 see = 8;
  if (this->see() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->see(), output);
  }

  // int32 sex = 9;
  if (this->sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sex(), output);
  }

  // int32 uid = 10;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckLoginSuccessUc)
}

::google::protobuf::uint8* AckLoginSuccessUc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckLoginSuccessUc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seatid = 1;
  if (this->seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // string avatar = 2;
  if (this->avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar().data(), static_cast<int>(this->avatar().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.AckLoginSuccessUc.avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->avatar(), target);
  }

  // int32 exp = 3;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // int32 money = 4;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->money(), target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.AckLoginSuccessUc.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // int32 ready = 6;
  if (this->ready() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ready(), target);
  }

  // int32 rmb = 7;
  if (this->rmb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rmb(), target);
  }

  // int32 see = 8;
  if (this->see() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->see(), target);
  }

  // int32 sex = 9;
  if (this->sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sex(), target);
  }

  // int32 uid = 10;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckLoginSuccessUc)
  return target;
}

size_t AckLoginSuccessUc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.game.AckLoginSuccessUc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string avatar = 2;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar());
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 seatid = 1;
  if (this->seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  // int32 exp = 3;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());
  }

  // int32 money = 4;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());
  }

  // int32 ready = 6;
  if (this->ready() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ready());
  }

  // int32 rmb = 7;
  if (this->rmb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rmb());
  }

  // int32 see = 8;
  if (this->see() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->see());
  }

  // int32 sex = 9;
  if (this->sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());
  }

  // int32 uid = 10;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLoginSuccessUc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.game.AckLoginSuccessUc)
  GOOGLE_DCHECK_NE(&from, this);
  const AckLoginSuccessUc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckLoginSuccessUc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.game.AckLoginSuccessUc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.game.AckLoginSuccessUc)
    MergeFrom(*source);
  }
}

void AckLoginSuccessUc::MergeFrom(const AckLoginSuccessUc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.game.AckLoginSuccessUc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar().size() > 0) {

    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.seatid() != 0) {
    set_seatid(from.seatid());
  }
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
  if (from.ready() != 0) {
    set_ready(from.ready());
  }
  if (from.rmb() != 0) {
    set_rmb(from.rmb());
  }
  if (from.see() != 0) {
    set_see(from.see());
  }
  if (from.sex() != 0) {
    set_sex(from.sex());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void AckLoginSuccessUc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.game.AckLoginSuccessUc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLoginSuccessUc::CopyFrom(const AckLoginSuccessUc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.game.AckLoginSuccessUc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLoginSuccessUc::IsInitialized() const {
  return true;
}

void AckLoginSuccessUc::Swap(AckLoginSuccessUc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckLoginSuccessUc::InternalSwap(AckLoginSuccessUc* other) {
  using std::swap;
  avatar_.Swap(&other->avatar_);
  name_.Swap(&other->name_);
  swap(seatid_, other->seatid_);
  swap(exp_, other->exp_);
  swap(money_, other->money_);
  swap(ready_, other->ready_);
  swap(rmb_, other->rmb_);
  swap(see_, other->see_);
  swap(sex_, other->sex_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckLoginSuccessUc::GetMetadata() const {
  protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckLoginSuccessBc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckLoginSuccessBc::kSeatidFieldNumber;
const int AckLoginSuccessBc::kUidFieldNumber;
const int AckLoginSuccessBc::kMoneyFieldNumber;
const int AckLoginSuccessBc::kNameFieldNumber;
const int AckLoginSuccessBc::kAvatarFieldNumber;
const int AckLoginSuccessBc::kSexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckLoginSuccessBc::AckLoginSuccessBc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_appproto_2eproto::InitDefaultsAckLoginSuccessBc();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckLoginSuccessBc)
}
AckLoginSuccessBc::AckLoginSuccessBc(const AckLoginSuccessBc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.avatar().size() > 0) {
    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  ::memcpy(&seatid_, &from.seatid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sex_) -
    reinterpret_cast<char*>(&seatid_)) + sizeof(sex_));
  // @@protoc_insertion_point(copy_constructor:proto.game.AckLoginSuccessBc)
}

void AckLoginSuccessBc::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&seatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sex_) -
      reinterpret_cast<char*>(&seatid_)) + sizeof(sex_));
  _cached_size_ = 0;
}

AckLoginSuccessBc::~AckLoginSuccessBc() {
  // @@protoc_insertion_point(destructor:proto.game.AckLoginSuccessBc)
  SharedDtor();
}

void AckLoginSuccessBc::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AckLoginSuccessBc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLoginSuccessBc::descriptor() {
  ::protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckLoginSuccessBc& AckLoginSuccessBc::default_instance() {
  ::protobuf_appproto_2eproto::InitDefaultsAckLoginSuccessBc();
  return *internal_default_instance();
}


void AckLoginSuccessBc::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.game.AckLoginSuccessBc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&seatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sex_) -
      reinterpret_cast<char*>(&seatid_)) + sizeof(sex_));
  _internal_metadata_.Clear();
}

bool AckLoginSuccessBc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckLoginSuccessBc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 seatid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 money = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.game.AckLoginSuccessBc.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string avatar = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar().data(), static_cast<int>(this->avatar().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.game.AckLoginSuccessBc.avatar"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sex = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckLoginSuccessBc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckLoginSuccessBc)
  return false;
#undef DO_
}

void AckLoginSuccessBc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckLoginSuccessBc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seatid = 1;
  if (this->seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // int32 money = 3;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.AckLoginSuccessBc.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // string avatar = 5;
  if (this->avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar().data(), static_cast<int>(this->avatar().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.AckLoginSuccessBc.avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->avatar(), output);
  }

  // int32 sex = 6;
  if (this->sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckLoginSuccessBc)
}

::google::protobuf::uint8* AckLoginSuccessBc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckLoginSuccessBc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seatid = 1;
  if (this->seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }

  // int32 money = 3;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.AckLoginSuccessBc.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // string avatar = 5;
  if (this->avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar().data(), static_cast<int>(this->avatar().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.AckLoginSuccessBc.avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->avatar(), target);
  }

  // int32 sex = 6;
  if (this->sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckLoginSuccessBc)
  return target;
}

size_t AckLoginSuccessBc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.game.AckLoginSuccessBc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string avatar = 5;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar());
  }

  // int32 seatid = 1;
  if (this->seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  // int32 money = 3;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());
  }

  // int32 sex = 6;
  if (this->sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLoginSuccessBc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.game.AckLoginSuccessBc)
  GOOGLE_DCHECK_NE(&from, this);
  const AckLoginSuccessBc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckLoginSuccessBc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.game.AckLoginSuccessBc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.game.AckLoginSuccessBc)
    MergeFrom(*source);
  }
}

void AckLoginSuccessBc::MergeFrom(const AckLoginSuccessBc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.game.AckLoginSuccessBc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.avatar().size() > 0) {

    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  if (from.seatid() != 0) {
    set_seatid(from.seatid());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
  if (from.sex() != 0) {
    set_sex(from.sex());
  }
}

void AckLoginSuccessBc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.game.AckLoginSuccessBc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLoginSuccessBc::CopyFrom(const AckLoginSuccessBc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.game.AckLoginSuccessBc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLoginSuccessBc::IsInitialized() const {
  return true;
}

void AckLoginSuccessBc::Swap(AckLoginSuccessBc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckLoginSuccessBc::InternalSwap(AckLoginSuccessBc* other) {
  using std::swap;
  name_.Swap(&other->name_);
  avatar_.Swap(&other->avatar_);
  swap(seatid_, other->seatid_);
  swap(uid_, other->uid_);
  swap(money_, other->money_);
  swap(sex_, other->sex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckLoginSuccessBc::GetMetadata() const {
  protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckLoginError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckLoginError::kUidFieldNumber;
const int AckLoginError::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckLoginError::AckLoginError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_appproto_2eproto::InitDefaultsAckLoginError();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckLoginError)
}
AckLoginError::AckLoginError(const AckLoginError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:proto.game.AckLoginError)
}

void AckLoginError::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(code_));
  _cached_size_ = 0;
}

AckLoginError::~AckLoginError() {
  // @@protoc_insertion_point(destructor:proto.game.AckLoginError)
  SharedDtor();
}

void AckLoginError::SharedDtor() {
}

void AckLoginError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLoginError::descriptor() {
  ::protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckLoginError& AckLoginError::default_instance() {
  ::protobuf_appproto_2eproto::InitDefaultsAckLoginError();
  return *internal_default_instance();
}


void AckLoginError::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.game.AckLoginError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool AckLoginError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckLoginError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckLoginError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckLoginError)
  return false;
#undef DO_
}

void AckLoginError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckLoginError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckLoginError)
}

::google::protobuf::uint8* AckLoginError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckLoginError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckLoginError)
  return target;
}

size_t AckLoginError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.game.AckLoginError)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLoginError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.game.AckLoginError)
  GOOGLE_DCHECK_NE(&from, this);
  const AckLoginError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckLoginError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.game.AckLoginError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.game.AckLoginError)
    MergeFrom(*source);
  }
}

void AckLoginError::MergeFrom(const AckLoginError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.game.AckLoginError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void AckLoginError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.game.AckLoginError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLoginError::CopyFrom(const AckLoginError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.game.AckLoginError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLoginError::IsInitialized() const {
  return true;
}

void AckLoginError::Swap(AckLoginError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckLoginError::InternalSwap(AckLoginError* other) {
  using std::swap;
  swap(uid_, other->uid_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckLoginError::GetMetadata() const {
  protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckLogoutBc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckLogoutBc::kSeatidFieldNumber;
const int AckLogoutBc::kUidFieldNumber;
const int AckLogoutBc::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckLogoutBc::AckLogoutBc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_appproto_2eproto::InitDefaultsAckLogoutBc();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckLogoutBc)
}
AckLogoutBc::AckLogoutBc(const AckLogoutBc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seatid_, &from.seatid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&seatid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto.game.AckLogoutBc)
}

void AckLogoutBc::SharedCtor() {
  ::memset(&seatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&seatid_)) + sizeof(type_));
  _cached_size_ = 0;
}

AckLogoutBc::~AckLogoutBc() {
  // @@protoc_insertion_point(destructor:proto.game.AckLogoutBc)
  SharedDtor();
}

void AckLogoutBc::SharedDtor() {
}

void AckLogoutBc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLogoutBc::descriptor() {
  ::protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckLogoutBc& AckLogoutBc::default_instance() {
  ::protobuf_appproto_2eproto::InitDefaultsAckLogoutBc();
  return *internal_default_instance();
}


void AckLogoutBc::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.game.AckLogoutBc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&seatid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool AckLogoutBc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckLogoutBc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 seatid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckLogoutBc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckLogoutBc)
  return false;
#undef DO_
}

void AckLogoutBc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckLogoutBc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seatid = 1;
  if (this->seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckLogoutBc)
}

::google::protobuf::uint8* AckLogoutBc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckLogoutBc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seatid = 1;
  if (this->seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckLogoutBc)
  return target;
}

size_t AckLogoutBc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.game.AckLogoutBc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 seatid = 1;
  if (this->seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLogoutBc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.game.AckLogoutBc)
  GOOGLE_DCHECK_NE(&from, this);
  const AckLogoutBc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckLogoutBc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.game.AckLogoutBc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.game.AckLogoutBc)
    MergeFrom(*source);
  }
}

void AckLogoutBc::MergeFrom(const AckLogoutBc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.game.AckLogoutBc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seatid() != 0) {
    set_seatid(from.seatid());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void AckLogoutBc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.game.AckLogoutBc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLogoutBc::CopyFrom(const AckLogoutBc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.game.AckLogoutBc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLogoutBc::IsInitialized() const {
  return true;
}

void AckLogoutBc::Swap(AckLogoutBc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckLogoutBc::InternalSwap(AckLogoutBc* other) {
  using std::swap;
  swap(seatid_, other->seatid_);
  swap(uid_, other->uid_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckLogoutBc::GetMetadata() const {
  protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckUpTableSuccess::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckUpTableSuccess::kUidFieldNumber;
const int AckUpTableSuccess::kSeatidFieldNumber;
const int AckUpTableSuccess::kReadyFieldNumber;
const int AckUpTableSuccess::kNameFieldNumber;
const int AckUpTableSuccess::kSexFieldNumber;
const int AckUpTableSuccess::kAvatarFieldNumber;
const int AckUpTableSuccess::kMoneyFieldNumber;
const int AckUpTableSuccess::kExpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckUpTableSuccess::AckUpTableSuccess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_appproto_2eproto::InitDefaultsAckUpTableSuccess();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckUpTableSuccess)
}
AckUpTableSuccess::AckUpTableSuccess(const AckUpTableSuccess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.avatar().size() > 0) {
    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(exp_));
  // @@protoc_insertion_point(copy_constructor:proto.game.AckUpTableSuccess)
}

void AckUpTableSuccess::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(exp_));
  _cached_size_ = 0;
}

AckUpTableSuccess::~AckUpTableSuccess() {
  // @@protoc_insertion_point(destructor:proto.game.AckUpTableSuccess)
  SharedDtor();
}

void AckUpTableSuccess::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AckUpTableSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpTableSuccess::descriptor() {
  ::protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckUpTableSuccess& AckUpTableSuccess::default_instance() {
  ::protobuf_appproto_2eproto::InitDefaultsAckUpTableSuccess();
  return *internal_default_instance();
}


void AckUpTableSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.game.AckUpTableSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(exp_));
  _internal_metadata_.Clear();
}

bool AckUpTableSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckUpTableSuccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 seatid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ready = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.game.AckUpTableSuccess.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string avatar = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar().data(), static_cast<int>(this->avatar().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.game.AckUpTableSuccess.avatar"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 money = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckUpTableSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckUpTableSuccess)
  return false;
#undef DO_
}

void AckUpTableSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckUpTableSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // int32 seatid = 2;
  if (this->seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // int32 ready = 3;
  if (this->ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ready(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.AckUpTableSuccess.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // int32 sex = 5;
  if (this->sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // string avatar = 6;
  if (this->avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar().data(), static_cast<int>(this->avatar().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.AckUpTableSuccess.avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->avatar(), output);
  }

  // int32 money = 7;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->money(), output);
  }

  // int32 exp = 8;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckUpTableSuccess)
}

::google::protobuf::uint8* AckUpTableSuccess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckUpTableSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // int32 seatid = 2;
  if (this->seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // int32 ready = 3;
  if (this->ready() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ready(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.AckUpTableSuccess.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // int32 sex = 5;
  if (this->sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // string avatar = 6;
  if (this->avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar().data(), static_cast<int>(this->avatar().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.AckUpTableSuccess.avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->avatar(), target);
  }

  // int32 money = 7;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->money(), target);
  }

  // int32 exp = 8;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckUpTableSuccess)
  return target;
}

size_t AckUpTableSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.game.AckUpTableSuccess)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string avatar = 6;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  // int32 seatid = 2;
  if (this->seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  // int32 ready = 3;
  if (this->ready() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ready());
  }

  // int32 sex = 5;
  if (this->sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());
  }

  // int32 money = 7;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());
  }

  // int32 exp = 8;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpTableSuccess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.game.AckUpTableSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  const AckUpTableSuccess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckUpTableSuccess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.game.AckUpTableSuccess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.game.AckUpTableSuccess)
    MergeFrom(*source);
  }
}

void AckUpTableSuccess::MergeFrom(const AckUpTableSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.game.AckUpTableSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.avatar().size() > 0) {

    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.seatid() != 0) {
    set_seatid(from.seatid());
  }
  if (from.ready() != 0) {
    set_ready(from.ready());
  }
  if (from.sex() != 0) {
    set_sex(from.sex());
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
}

void AckUpTableSuccess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.game.AckUpTableSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpTableSuccess::CopyFrom(const AckUpTableSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.game.AckUpTableSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpTableSuccess::IsInitialized() const {
  return true;
}

void AckUpTableSuccess::Swap(AckUpTableSuccess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckUpTableSuccess::InternalSwap(AckUpTableSuccess* other) {
  using std::swap;
  name_.Swap(&other->name_);
  avatar_.Swap(&other->avatar_);
  swap(uid_, other->uid_);
  swap(seatid_, other->seatid_);
  swap(ready_, other->ready_);
  swap(sex_, other->sex_);
  swap(money_, other->money_);
  swap(exp_, other->exp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckUpTableSuccess::GetMetadata() const {
  protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckUpTableErrorUc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckUpTableErrorUc::kUidFieldNumber;
const int AckUpTableErrorUc::kMoneyFieldNumber;
const int AckUpTableErrorUc::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckUpTableErrorUc::AckUpTableErrorUc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_appproto_2eproto::InitDefaultsAckUpTableErrorUc();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckUpTableErrorUc)
}
AckUpTableErrorUc::AckUpTableErrorUc(const AckUpTableErrorUc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:proto.game.AckUpTableErrorUc)
}

void AckUpTableErrorUc::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(code_));
  _cached_size_ = 0;
}

AckUpTableErrorUc::~AckUpTableErrorUc() {
  // @@protoc_insertion_point(destructor:proto.game.AckUpTableErrorUc)
  SharedDtor();
}

void AckUpTableErrorUc::SharedDtor() {
}

void AckUpTableErrorUc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpTableErrorUc::descriptor() {
  ::protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckUpTableErrorUc& AckUpTableErrorUc::default_instance() {
  ::protobuf_appproto_2eproto::InitDefaultsAckUpTableErrorUc();
  return *internal_default_instance();
}


void AckUpTableErrorUc::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.game.AckUpTableErrorUc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool AckUpTableErrorUc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckUpTableErrorUc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 money = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckUpTableErrorUc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckUpTableErrorUc)
  return false;
#undef DO_
}

void AckUpTableErrorUc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckUpTableErrorUc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // int32 money = 2;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckUpTableErrorUc)
}

::google::protobuf::uint8* AckUpTableErrorUc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckUpTableErrorUc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // int32 money = 2;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckUpTableErrorUc)
  return target;
}

size_t AckUpTableErrorUc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.game.AckUpTableErrorUc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  // int32 money = 2;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());
  }

  // int32 code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpTableErrorUc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.game.AckUpTableErrorUc)
  GOOGLE_DCHECK_NE(&from, this);
  const AckUpTableErrorUc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckUpTableErrorUc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.game.AckUpTableErrorUc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.game.AckUpTableErrorUc)
    MergeFrom(*source);
  }
}

void AckUpTableErrorUc::MergeFrom(const AckUpTableErrorUc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.game.AckUpTableErrorUc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void AckUpTableErrorUc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.game.AckUpTableErrorUc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpTableErrorUc::CopyFrom(const AckUpTableErrorUc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.game.AckUpTableErrorUc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpTableErrorUc::IsInitialized() const {
  return true;
}

void AckUpTableErrorUc::Swap(AckUpTableErrorUc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckUpTableErrorUc::InternalSwap(AckUpTableErrorUc* other) {
  using std::swap;
  swap(uid_, other->uid_);
  swap(money_, other->money_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckUpTableErrorUc::GetMetadata() const {
  protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckAheadDownTable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckAheadDownTable::kUidFieldNumber;
const int AckAheadDownTable::kSeatidFieldNumber;
const int AckAheadDownTable::kDownTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckAheadDownTable::AckAheadDownTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_appproto_2eproto::InitDefaultsAckAheadDownTable();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckAheadDownTable)
}
AckAheadDownTable::AckAheadDownTable(const AckAheadDownTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_tag_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(down_tag_));
  // @@protoc_insertion_point(copy_constructor:proto.game.AckAheadDownTable)
}

void AckAheadDownTable::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_tag_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(down_tag_));
  _cached_size_ = 0;
}

AckAheadDownTable::~AckAheadDownTable() {
  // @@protoc_insertion_point(destructor:proto.game.AckAheadDownTable)
  SharedDtor();
}

void AckAheadDownTable::SharedDtor() {
}

void AckAheadDownTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckAheadDownTable::descriptor() {
  ::protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckAheadDownTable& AckAheadDownTable::default_instance() {
  ::protobuf_appproto_2eproto::InitDefaultsAckAheadDownTable();
  return *internal_default_instance();
}


void AckAheadDownTable::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.game.AckAheadDownTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_tag_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(down_tag_));
  _internal_metadata_.Clear();
}

bool AckAheadDownTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckAheadDownTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 seatid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 down_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &down_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckAheadDownTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckAheadDownTable)
  return false;
#undef DO_
}

void AckAheadDownTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckAheadDownTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // int32 seatid = 2;
  if (this->seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // int32 down_tag = 3;
  if (this->down_tag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->down_tag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckAheadDownTable)
}

::google::protobuf::uint8* AckAheadDownTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckAheadDownTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // int32 seatid = 2;
  if (this->seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // int32 down_tag = 3;
  if (this->down_tag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->down_tag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckAheadDownTable)
  return target;
}

size_t AckAheadDownTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.game.AckAheadDownTable)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  // int32 seatid = 2;
  if (this->seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  // int32 down_tag = 3;
  if (this->down_tag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->down_tag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckAheadDownTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.game.AckAheadDownTable)
  GOOGLE_DCHECK_NE(&from, this);
  const AckAheadDownTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckAheadDownTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.game.AckAheadDownTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.game.AckAheadDownTable)
    MergeFrom(*source);
  }
}

void AckAheadDownTable::MergeFrom(const AckAheadDownTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.game.AckAheadDownTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.seatid() != 0) {
    set_seatid(from.seatid());
  }
  if (from.down_tag() != 0) {
    set_down_tag(from.down_tag());
  }
}

void AckAheadDownTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.game.AckAheadDownTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckAheadDownTable::CopyFrom(const AckAheadDownTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.game.AckAheadDownTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckAheadDownTable::IsInitialized() const {
  return true;
}

void AckAheadDownTable::Swap(AckAheadDownTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckAheadDownTable::InternalSwap(AckAheadDownTable* other) {
  using std::swap;
  swap(uid_, other->uid_);
  swap(seatid_, other->seatid_);
  swap(down_tag_, other->down_tag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckAheadDownTable::GetMetadata() const {
  protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckDownTableSuccess::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckDownTableSuccess::kUidFieldNumber;
const int AckDownTableSuccess::kSeatidFieldNumber;
const int AckDownTableSuccess::kMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckDownTableSuccess::AckDownTableSuccess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_appproto_2eproto::InitDefaultsAckDownTableSuccess();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckDownTableSuccess)
}
AckDownTableSuccess::AckDownTableSuccess(const AckDownTableSuccess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(money_));
  // @@protoc_insertion_point(copy_constructor:proto.game.AckDownTableSuccess)
}

void AckDownTableSuccess::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(money_));
  _cached_size_ = 0;
}

AckDownTableSuccess::~AckDownTableSuccess() {
  // @@protoc_insertion_point(destructor:proto.game.AckDownTableSuccess)
  SharedDtor();
}

void AckDownTableSuccess::SharedDtor() {
}

void AckDownTableSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDownTableSuccess::descriptor() {
  ::protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckDownTableSuccess& AckDownTableSuccess::default_instance() {
  ::protobuf_appproto_2eproto::InitDefaultsAckDownTableSuccess();
  return *internal_default_instance();
}


void AckDownTableSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.game.AckDownTableSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(money_));
  _internal_metadata_.Clear();
}

bool AckDownTableSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckDownTableSuccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 seatid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 money = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckDownTableSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckDownTableSuccess)
  return false;
#undef DO_
}

void AckDownTableSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckDownTableSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // int32 seatid = 2;
  if (this->seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // int32 money = 3;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckDownTableSuccess)
}

::google::protobuf::uint8* AckDownTableSuccess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckDownTableSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // int32 seatid = 2;
  if (this->seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // int32 money = 3;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckDownTableSuccess)
  return target;
}

size_t AckDownTableSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.game.AckDownTableSuccess)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  // int32 seatid = 2;
  if (this->seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  // int32 money = 3;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDownTableSuccess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.game.AckDownTableSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  const AckDownTableSuccess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckDownTableSuccess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.game.AckDownTableSuccess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.game.AckDownTableSuccess)
    MergeFrom(*source);
  }
}

void AckDownTableSuccess::MergeFrom(const AckDownTableSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.game.AckDownTableSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.seatid() != 0) {
    set_seatid(from.seatid());
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
}

void AckDownTableSuccess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.game.AckDownTableSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDownTableSuccess::CopyFrom(const AckDownTableSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.game.AckDownTableSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDownTableSuccess::IsInitialized() const {
  return true;
}

void AckDownTableSuccess::Swap(AckDownTableSuccess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckDownTableSuccess::InternalSwap(AckDownTableSuccess* other) {
  using std::swap;
  swap(uid_, other->uid_);
  swap(seatid_, other->seatid_);
  swap(money_, other->money_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckDownTableSuccess::GetMetadata() const {
  protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckPrereadyBC::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckPrereadyBC::kRoomidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckPrereadyBC::AckPrereadyBC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_appproto_2eproto::InitDefaultsAckPrereadyBC();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckPrereadyBC)
}
AckPrereadyBC::AckPrereadyBC(const AckPrereadyBC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.roomid().size() > 0) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.game.AckPrereadyBC)
}

void AckPrereadyBC::SharedCtor() {
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AckPrereadyBC::~AckPrereadyBC() {
  // @@protoc_insertion_point(destructor:proto.game.AckPrereadyBC)
  SharedDtor();
}

void AckPrereadyBC::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AckPrereadyBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPrereadyBC::descriptor() {
  ::protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckPrereadyBC& AckPrereadyBC::default_instance() {
  ::protobuf_appproto_2eproto::InitDefaultsAckPrereadyBC();
  return *internal_default_instance();
}


void AckPrereadyBC::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.game.AckPrereadyBC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AckPrereadyBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckPrereadyBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomid().data(), static_cast<int>(this->roomid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.game.AckPrereadyBC.roomid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckPrereadyBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckPrereadyBC)
  return false;
#undef DO_
}

void AckPrereadyBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckPrereadyBC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomid = 1;
  if (this->roomid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomid().data(), static_cast<int>(this->roomid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.AckPrereadyBC.roomid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->roomid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckPrereadyBC)
}

::google::protobuf::uint8* AckPrereadyBC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckPrereadyBC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomid = 1;
  if (this->roomid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomid().data(), static_cast<int>(this->roomid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.game.AckPrereadyBC.roomid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckPrereadyBC)
  return target;
}

size_t AckPrereadyBC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.game.AckPrereadyBC)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string roomid = 1;
  if (this->roomid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPrereadyBC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.game.AckPrereadyBC)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPrereadyBC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckPrereadyBC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.game.AckPrereadyBC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.game.AckPrereadyBC)
    MergeFrom(*source);
  }
}

void AckPrereadyBC::MergeFrom(const AckPrereadyBC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.game.AckPrereadyBC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid().size() > 0) {

    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
}

void AckPrereadyBC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.game.AckPrereadyBC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPrereadyBC::CopyFrom(const AckPrereadyBC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.game.AckPrereadyBC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPrereadyBC::IsInitialized() const {
  return true;
}

void AckPrereadyBC::Swap(AckPrereadyBC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckPrereadyBC::InternalSwap(AckPrereadyBC* other) {
  using std::swap;
  roomid_.Swap(&other->roomid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckPrereadyBC::GetMetadata() const {
  protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckEmotionBC::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckEmotionBC::kSeatidFieldNumber;
const int AckEmotionBC::kMoneyFieldNumber;
const int AckEmotionBC::kTargetSeatidFieldNumber;
const int AckEmotionBC::kTargetSeatNumFieldNumber;
const int AckEmotionBC::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckEmotionBC::AckEmotionBC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_appproto_2eproto::InitDefaultsAckEmotionBC();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckEmotionBC)
}
AckEmotionBC::AckEmotionBC(const AckEmotionBC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seatid_, &from.seatid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&seatid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto.game.AckEmotionBC)
}

void AckEmotionBC::SharedCtor() {
  ::memset(&seatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&seatid_)) + sizeof(type_));
  _cached_size_ = 0;
}

AckEmotionBC::~AckEmotionBC() {
  // @@protoc_insertion_point(destructor:proto.game.AckEmotionBC)
  SharedDtor();
}

void AckEmotionBC::SharedDtor() {
}

void AckEmotionBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckEmotionBC::descriptor() {
  ::protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckEmotionBC& AckEmotionBC::default_instance() {
  ::protobuf_appproto_2eproto::InitDefaultsAckEmotionBC();
  return *internal_default_instance();
}


void AckEmotionBC::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.game.AckEmotionBC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&seatid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool AckEmotionBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckEmotionBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 seatid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 money = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 target_seatid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_seatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 target_seat_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_seat_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckEmotionBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckEmotionBC)
  return false;
#undef DO_
}

void AckEmotionBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckEmotionBC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seatid = 1;
  if (this->seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // int32 money = 2;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

  // int32 target_seatid = 3;
  if (this->target_seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target_seatid(), output);
  }

  // int32 target_seat_num = 4;
  if (this->target_seat_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->target_seat_num(), output);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckEmotionBC)
}

::google::protobuf::uint8* AckEmotionBC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckEmotionBC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seatid = 1;
  if (this->seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // int32 money = 2;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }

  // int32 target_seatid = 3;
  if (this->target_seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target_seatid(), target);
  }

  // int32 target_seat_num = 4;
  if (this->target_seat_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->target_seat_num(), target);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckEmotionBC)
  return target;
}

size_t AckEmotionBC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.game.AckEmotionBC)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 seatid = 1;
  if (this->seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seatid());
  }

  // int32 money = 2;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());
  }

  // int32 target_seatid = 3;
  if (this->target_seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_seatid());
  }

  // int32 target_seat_num = 4;
  if (this->target_seat_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_seat_num());
  }

  // int32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckEmotionBC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.game.AckEmotionBC)
  GOOGLE_DCHECK_NE(&from, this);
  const AckEmotionBC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckEmotionBC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.game.AckEmotionBC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.game.AckEmotionBC)
    MergeFrom(*source);
  }
}

void AckEmotionBC::MergeFrom(const AckEmotionBC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.game.AckEmotionBC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seatid() != 0) {
    set_seatid(from.seatid());
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
  if (from.target_seatid() != 0) {
    set_target_seatid(from.target_seatid());
  }
  if (from.target_seat_num() != 0) {
    set_target_seat_num(from.target_seat_num());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void AckEmotionBC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.game.AckEmotionBC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEmotionBC::CopyFrom(const AckEmotionBC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.game.AckEmotionBC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEmotionBC::IsInitialized() const {
  return true;
}

void AckEmotionBC::Swap(AckEmotionBC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckEmotionBC::InternalSwap(AckEmotionBC* other) {
  using std::swap;
  swap(seatid_, other->seatid_);
  swap(money_, other->money_);
  swap(target_seatid_, other->target_seatid_);
  swap(target_seat_num_, other->target_seat_num_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckEmotionBC::GetMetadata() const {
  protobuf_appproto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_appproto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace game
}  // namespace proto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::game::ReqLogin* Arena::Create< ::proto::game::ReqLogin >(Arena* arena) {
  return Arena::CreateInternal< ::proto::game::ReqLogin >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::game::ReqLogout* Arena::Create< ::proto::game::ReqLogout >(Arena* arena) {
  return Arena::CreateInternal< ::proto::game::ReqLogout >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::game::AckLoginSuccessUc* Arena::Create< ::proto::game::AckLoginSuccessUc >(Arena* arena) {
  return Arena::CreateInternal< ::proto::game::AckLoginSuccessUc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::game::AckLoginSuccessBc* Arena::Create< ::proto::game::AckLoginSuccessBc >(Arena* arena) {
  return Arena::CreateInternal< ::proto::game::AckLoginSuccessBc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::game::AckLoginError* Arena::Create< ::proto::game::AckLoginError >(Arena* arena) {
  return Arena::CreateInternal< ::proto::game::AckLoginError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::game::AckLogoutBc* Arena::Create< ::proto::game::AckLogoutBc >(Arena* arena) {
  return Arena::CreateInternal< ::proto::game::AckLogoutBc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::game::AckUpTableSuccess* Arena::Create< ::proto::game::AckUpTableSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::proto::game::AckUpTableSuccess >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::game::AckUpTableErrorUc* Arena::Create< ::proto::game::AckUpTableErrorUc >(Arena* arena) {
  return Arena::CreateInternal< ::proto::game::AckUpTableErrorUc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::game::AckAheadDownTable* Arena::Create< ::proto::game::AckAheadDownTable >(Arena* arena) {
  return Arena::CreateInternal< ::proto::game::AckAheadDownTable >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::game::AckDownTableSuccess* Arena::Create< ::proto::game::AckDownTableSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::proto::game::AckDownTableSuccess >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::game::AckPrereadyBC* Arena::Create< ::proto::game::AckPrereadyBC >(Arena* arena) {
  return Arena::CreateInternal< ::proto::game::AckPrereadyBC >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::game::AckEmotionBC* Arena::Create< ::proto::game::AckEmotionBC >(Arena* arena) {
  return Arena::CreateInternal< ::proto::game::AckEmotionBC >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
